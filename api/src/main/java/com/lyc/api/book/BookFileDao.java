package com.lyc.api.book;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.lyc.api.book.BookFile.Status;
import com.lyc.api.book.BookFile.StatusConverter;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "BOOK_FILE".
 */
public class BookFileDao extends AbstractDao<BookFile, Long> {

    public static final String TABLENAME = "BOOK_FILE";
    private final StatusConverter statusConverter = new StatusConverter();

    public BookFileDao(DaoConfig config) {
        super(config);
    }

    public BookFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_FILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"REAL_PATH\" TEXT," + // 1: realPath
                "\"FILENAME\" TEXT," + // 2: filename
                "\"IMPORT_TIME\" INTEGER NOT NULL ," + // 3: importTime
                "\"LAST_ACCESS_TIME\" INTEGER NOT NULL ," + // 4: lastAccessTime
                "\"DELETE_TIME\" INTEGER NOT NULL ," + // 5: deleteTime
                "\"STATUS\" TEXT);"); // 6: status
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_BOOK_FILE_FILENAME ON \"BOOK_FILE\"" +
                " (\"FILENAME\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_BOOK_FILE_IMPORT_TIME_DESC ON \"BOOK_FILE\"" +
                " (\"IMPORT_TIME\" DESC);");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_FILE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookFile entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String realPath = entity.getRealPath();
        if (realPath != null) {
            stmt.bindString(2, realPath);
        }

        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(3, filename);
        }
        stmt.bindLong(4, entity.getImportTime());
        stmt.bindLong(5, entity.getLastAccessTime());
        stmt.bindLong(6, entity.getDeleteTime());

        Status status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, statusConverter.convertToDatabaseValue(status));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookFile entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String realPath = entity.getRealPath();
        if (realPath != null) {
            stmt.bindString(2, realPath);
        }

        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(3, filename);
        }
        stmt.bindLong(4, entity.getImportTime());
        stmt.bindLong(5, entity.getLastAccessTime());
        stmt.bindLong(6, entity.getDeleteTime());

        Status status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, statusConverter.convertToDatabaseValue(status));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public BookFile readEntity(Cursor cursor, int offset) {
        BookFile entity = new BookFile( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // realPath
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // filename
                cursor.getLong(offset + 3), // importTime
                cursor.getLong(offset + 4), // lastAccessTime
                cursor.getLong(offset + 5), // deleteTime
                cursor.isNull(offset + 6) ? null : statusConverter.convertToEntityProperty(cursor.getString(offset + 6)) // status
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, BookFile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRealPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFilename(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImportTime(cursor.getLong(offset + 3));
        entity.setLastAccessTime(cursor.getLong(offset + 4));
        entity.setDeleteTime(cursor.getLong(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : statusConverter.convertToEntityProperty(cursor.getString(offset + 6)));
    }

    @Override
    protected final Long updateKeyAfterInsert(BookFile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(BookFile entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookFile entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity BookFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RealPath = new Property(1, String.class, "realPath", false, "REAL_PATH");
        public final static Property Filename = new Property(2, String.class, "filename", false, "FILENAME");
        public final static Property ImportTime = new Property(3, long.class, "importTime", false, "IMPORT_TIME");
        public final static Property LastAccessTime = new Property(4, long.class, "lastAccessTime", false, "LAST_ACCESS_TIME");
        public final static Property DeleteTime = new Property(5, long.class, "deleteTime", false, "DELETE_TIME");
        public final static Property Status = new Property(6, String.class, "status", false, "STATUS");
    }

}
