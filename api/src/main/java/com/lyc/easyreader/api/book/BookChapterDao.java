package com.lyc.easyreader.api.book;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "BOOK_CHAPTER".
 */
public class BookChapterDao extends AbstractDao<BookChapter, Long> {

    public static final String TABLENAME = "BOOK_CHAPTER";

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_CHAPTER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ORDER\" INTEGER NOT NULL ," + // 1: order
                "\"LAST_MODIFIED\" INTEGER NOT NULL ," + // 2: lastModified
                "\"BOOK_ID\" INTEGER NOT NULL ," + // 3: bookId
                "\"TITLE\" TEXT," + // 4: title
                "\"START\" INTEGER NOT NULL ," + // 5: start
                "\"END\" INTEGER NOT NULL );"); // 6: end
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_BOOK_CHAPTER_BOOK_ID ON \"BOOK_CHAPTER\"" +
                " (\"BOOK_ID\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_BOOK_CHAPTER_BOOK_ID ON \"BOOK_CHAPTER\"" +
                " (\"BOOK_ID\" ASC);");
    }


    public BookChapterDao(DaoConfig config) {
        super(config);
    }

    public BookChapterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_CHAPTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookChapter entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOrder());
        stmt.bindLong(3, entity.getLastModified());
        stmt.bindLong(4, entity.getBookId());

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
        stmt.bindLong(6, entity.getStart());
        stmt.bindLong(7, entity.getEnd());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookChapter entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOrder());
        stmt.bindLong(3, entity.getLastModified());
        stmt.bindLong(4, entity.getBookId());

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
        stmt.bindLong(6, entity.getStart());
        stmt.bindLong(7, entity.getEnd());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public BookChapter readEntity(Cursor cursor, int offset) {
        BookChapter entity = new BookChapter( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getInt(offset + 1), // order
                cursor.getLong(offset + 2), // lastModified
                cursor.getLong(offset + 3), // bookId
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
                cursor.getLong(offset + 5), // start
                cursor.getLong(offset + 6) // end
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, BookChapter entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrder(cursor.getInt(offset + 1));
        entity.setLastModified(cursor.getLong(offset + 2));
        entity.setBookId(cursor.getLong(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStart(cursor.getLong(offset + 5));
        entity.setEnd(cursor.getLong(offset + 6));
     }
     
    @Override
    public Long getKey(BookChapter entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final Long updateKeyAfterInsert(BookChapter entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * Properties of entity BookChapter.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Order = new Property(1, int.class, "order", false, "ORDER");
        public final static Property LastModified = new Property(2, long.class, "lastModified", false, "LAST_MODIFIED");
        public final static Property BookId = new Property(3, long.class, "bookId", false, "BOOK_ID");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Start = new Property(5, long.class, "start", false, "START");
        public final static Property End = new Property(6, long.class, "end", false, "END");
    }

    @Override
    public boolean hasKey(BookChapter entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
